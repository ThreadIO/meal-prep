import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  Input,
  ModalFooter,
  Button,
  Spinner,
} from "@nextui-org/react";
import Image from "next/image";
import { useState, useEffect } from "react";
import { createProduct, patchProduct } from "@/helpers/request";
import { useUser } from "@propelauth/nextjs/client";
import Dropdown from "@/components/Dropdown";
import { findObjectByValue } from "@/helpers/frontend";
import { stockStatusOptions } from "@/helpers/utils";

interface ThreadProductModalProps {
  product: any;
  productImage: any;
  open: boolean;
  mode: "create" | "patch";
  onClose: () => void;
  onUpdate: () => void;
  categories: any[];
}

// This will be the updated Modal to ingest and edit Thread Products (from our DB)
// This will be the interface to allow a user to either create or update a product
// Once a product gets created, we will store it in the Thread DB, and then sync it with WooCommerce
// If a product gets updated, we will update it in the Thread DB, and then sync it with WooCommerce
// The product options will be, Name, Image, Category, Stock Status, Price, Description, Product Settings, and Options

// We will allow the options to be edited, and then we will save the changes to the Thread DB, and sync the options to Woocommerce
// Eventually, we will use the products from the Thread DB to set a SEO optimized description for the product to expose the nutrition facts to the public

export const ThreadProductModal = (props: ThreadProductModalProps) => {
  const { product, productImage, open, onClose, onUpdate, categories } = props;
  const [productName, setProductName] = useState("");
  const [loadingSave, setLoadingSave] = useState(false);
  const [productDescription, setProductDescription] = useState("");
  const [productRegularPrice, setProductRegularPrice] = useState("");
  const [selectedKeys, setSelectedKeys] = useState<any>(new Set());
  const [selectedStockStatus, setSelectedStockStatus] = useState<any>(
    new Set()
  );
  const [productAddons, setProductAddons] = useState<any[]>([]);
  const [nutritionFacts, setNutritionFacts] = useState<any>({});

  //   useEffect(() => {
  //     if (product) {
  //       setProductName(product.name || "");
  //       setProductDescription(product.description || "");
  //       setProductRegularPrice(product.regular_price || "");
  //       setSelectedKeys(
  //         new Set(
  //           product.categories
  //             ? product.categories.map((category: any) => category.name)
  //             : []
  //         )
  //       );
  //       setSelectedStockStatus(
  //         new Set([
  //           stockStatusOptions.find(
  //             (option) => option.value === (product.stock_status || "instock")
  //           )?.display || "In Stock",
  //         ])
  //       );
  //       setProductAddons(product.product_addons || []);
  //       setACF(product.acf || {});
  //     }
  //   }, [product]);

  // This renders the Name input field
  const renderName = () => {
    return (
      <div className="mb-4">
        <strong>Name:</strong>
        <Input
          value={productName}
          fullWidth
          onChange={(e) => setProductName(e.target.value)}
        />
      </div>
    );
  };

  // This renders the Image
  const renderImage = () => {
    if (productImage && Object.keys(productImage).length !== 0) {
      return (
        <div className="relative h-60 mb-4 flex justify-center items-center">
          <Image
            src={productImage.src}
            alt={"Product Image"}
            width={100}
            height={100}
            style={{
              objectFit: "contain",
              objectPosition: "center",
            }}
          />
        </div>
      );
    }
  };

  const renderCategoryDropdown = () => {
    return (
      <Dropdown
        aria_label="Multiple selection example"
        variant="flat"
        closeOnSelect={false}
        disallowEmptySelection
        selectionMode="multiple"
        selectedKeys={selectedKeys}
        onSelectionChange={setSelectedKeys}
        items={categories}
      />
    );
  };

  // Helper function to map selected categories to objects
  const mapSelectedCategoriesToObjects = (
    categories: any,
    selectedKeys: any
  ) => {
    const selectedCategoryObjects = categories.filter((category: any) =>
      selectedKeys.has(category.name)
    );
    return selectedCategoryObjects;
  };

  const { loading, user } = useUser();
  const userId = user?.userId || "";

  const handleSave = async () => {
    setLoadingSave(true);
    const selectedCategories = mapSelectedCategoriesToObjects(
      categories,
      selectedKeys
    );
    const selectedStockStatusDisplay = Array.from(selectedStockStatus)[0];
    const matchingStockOption = stockStatusOptions.find(
      (option) => option.display === selectedStockStatusDisplay
    );
    const matchingStockOptionValue = matchingStockOption?.value || "instock";
    const body = {
      ...(product || {}),
      name: String(productName),
      images: product.images,
      description: String(productDescription),
      regular_price: String(productRegularPrice),
      categories: selectedCategories,
      stock_status: matchingStockOptionValue,
      userid: userId,
      product_addons: productAddons,
      acf: acf,
    };

    const ignoredParams = [
      "composite_layout",
      "composite_add_to_cart_form_location",
      "composite_sold_individually_context",
      "composite_shop_price_calc",
      "bundle_layout",
    ];
    ignoredParams.forEach((param) => delete body[param]);
    props.mode === "patch"
      ? await patchProduct(product.id, body)
      : await createProduct(body);
    onUpdate();
    setLoadingSave(false);
    onClose();
  };

  const handleAddonChange = (index: number, field: string, value: any) => {
    const updatedAddons = [...productAddons];
    updatedAddons[0].options[index][field] = value;
    setProductAddons(updatedAddons);
  };

  const renderStockStatusDropdown = () => {
    const getColor = (value: string) => {
      switch (value) {
        case "In Stock":
          return "success";
        case "Out Of Stock":
          return "danger";
        case "On Backorder":
          return "warning";
        default:
          return "default";
      }
    };

    return (
      <Dropdown
        aria_label="Stock Status selection example"
        variant="flat"
        closeOnSelect={false}
        disallowEmptySelection
        selectionMode="single"
        selectedKeys={selectedStockStatus}
        onSelectionChange={setSelectedStockStatus}
        items={stockStatusOptions.map((status) => ({ name: status.display }))}
        color={getColor(Array.from(selectedStockStatus)[0] as string)}
      />
    );
  };

  const renderOptions = () => {
    if (productAddons.length === 0 || !productAddons[0].options) {
      return null;
    }

    return (
      <div className="mb-4">
        <strong>Options:</strong>
        <div className="overflow-y-auto max-h-60 min-h-50">
          {productAddons[0].options.map((option: any, index: number) => (
            <div key={index} className="mb-4">
              <div className="mb-2">
                <strong>Label:</strong>
                <Input
                  value={option.label}
                  fullWidth
                  onChange={(e) =>
                    handleAddonChange(index, "label", e.target.value)
                  }
                />
              </div>
              <div className="mb-2">
                <strong>Calories:</strong>
                <Input
                  value={option.calories}
                  fullWidth
                  onChange={(e) =>
                    handleAddonChange(index, "label", e.target.value)
                  }
                />
              </div>
              <div className="mb-2">
                <strong>Carbs:</strong>
                <Input
                  value={option.carbs}
                  fullWidth
                  onChange={(e) =>
                    handleAddonChange(index, "carbs", e.target.value)
                  }
                />
              </div>
              <div className="mb-2">
                <strong>Fat:</strong>
                <Input
                  value={option.fat}
                  fullWidth
                  onChange={(e) =>
                    handleAddonChange(index, "fat", e.target.value)
                  }
                />
              </div>
              <div className="mb-2">
                <strong>Protein:</strong>
                <Input
                  value={option.protein}
                  fullWidth
                  onChange={(e) =>
                    handleAddonChange(index, "protein", e.target.value)
                  }
                />
              </div>
              <div className="mb-2">
                <strong>Price:</strong>
                <Input
                  value={option.price}
                  fullWidth
                  onChange={(e) =>
                    handleAddonChange(index, "price", e.target.value)
                  }
                />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderContent = () => {
    if (loading) {
      return (
        <div
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <div style={{ textAlign: "center" }}>
            <Spinner label={"Loading Settings"} />
          </div>
        </div>
      );
    } else {
      return renderModalContent();
    }
  };

  const renderPriceDetails = () => {
    return (
      <>
        <div className="mb-4">
          <strong>Price:</strong>{" "}
          {(parseFloat(product.price) || 0).toLocaleString("en-US", {
            style: "currency",
            currency: "USD",
          })}
        </div>
        <div className="mb-4">
          <strong>Regular Price:</strong>{" "}
          <Input
            value={productRegularPrice}
            fullWidth
            onChange={(e) => setProductRegularPrice(e.target.value)}
          />
        </div>
      </>
    );
  };

  const renderDescription = () => {
    return (
      <div className="mb-4">
        <strong>Description:</strong>
        <Input
          value={productDescription}
          fullWidth
          onChange={(e) => setProductDescription(e.target.value)}
        />
      </div>
    );
  };

  const renderProductSettings = () => {
    if (acf && acf.facts) {
      const items = acf.facts.items;
      const fatObj = findObjectByValue(items, "label", "fat");
      const carbsObj = findObjectByValue(items, "label", "carbs");
      const proteinObj = findObjectByValue(items, "label", "protein");
      return (
        <>
          <div className="mb-4">
            <strong>Product Settings: </strong>
          </div>
          <div className="mb-2">
            <strong>Nutrition Facts: </strong>
          </div>
          <div className="mb-2">
            <strong>Ingredients: </strong>
            <Input
              value={acf.ingredients.description}
              fullWidth
              onChange={(e) => {
                setACF({
                  ...acf,
                  ingredients: {
                    ...acf.ingredients,
                    description: e.target.value,
                  },
                });
              }}
            />
          </div>
          <div className="mb-2">
            <strong>Calories: </strong>
            <Input
              value={acf.facts.calories}
              fullWidth
              onChange={(e) => {
                setACF({
                  ...acf,
                  facts: {
                    ...acf.facts,
                    calories: e.target.value,
                  },
                });
              }}
            />
          </div>
          <div className="mb-2">
            <strong>Fat: </strong>
            <Input
              value={fatObj?.amount || ""}
              fullWidth
              onChange={(e) => {
                setACF({
                  ...acf,
                  facts: {
                    ...acf.facts,
                    items: acf.facts.items.map((item: any) =>
                      item.label === "fat"
                        ? { ...item, amount: e.target.value }
                        : item
                    ),
                  },
                });
              }}
            />
          </div>
          <div className="mb-2">
            <strong>Carbs: </strong>
            <Input
              value={carbsObj?.amount || ""}
              fullWidth
              onChange={(e) => {
                setACF({
                  ...acf,
                  facts: {
                    ...acf.facts,
                    items: acf.facts.items.map((item: any) =>
                      item.label === "carbs"
                        ? { ...item, amount: e.target.value }
                        : item
                    ),
                  },
                });
              }}
            />
          </div>
          <div className="mb-2">
            <strong>Protein: </strong>
            <Input
              value={proteinObj?.amount || ""}
              fullWidth
              onChange={(e) => {
                setACF({
                  ...acf,
                  facts: {
                    ...acf.facts,
                    items: acf.facts.items.map((item: any) =>
                      item.label === "protein"
                        ? { ...item, amount: e.target.value }
                        : item
                    ),
                  },
                });
              }}
            />
          </div>
        </>
      );
    }
  };

  const renderModalContent = () => {
    return (
      <ModalContent>
        <>
          <ModalHeader className="flex flex-col gap-1 text-center">
            Product Information
          </ModalHeader>
          <ModalBody className="flex flex-col overflow-y-auto">
            {renderName()}
            {renderImage()}
            {renderCategoryDropdown()}
            {renderStockStatusDropdown()}
            {renderPriceDetails()}
            {renderProductSettings()}
            {renderOptions()}
            {renderDescription()}
          </ModalBody>
          <ModalFooter>
            <Button
              color="primary"
              onPress={() => handleSave()}
              isLoading={loadingSave || loading}
            >
              Save
            </Button>
          </ModalFooter>
        </>
      </ModalContent>
    );
  };

  return (
    <Modal isOpen={open} onOpenChange={onClose} size="full">
      {renderContent()}
    </Modal>
  );
};

export default ThreadProductModal;
